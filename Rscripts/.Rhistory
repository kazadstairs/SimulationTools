return(QMData[,4])
}
GetCompletionPunctualiyColumn <- function(){
return(QMData[,5])
}
####
BuildDfFor <- function(InstanceName,ScheduleName,Nruns){
rmvals <- GetRM(GetSimSettings(InstanceName,ScheduleName,Nruns))
cmax <- GetQM(GetQMs(InstanceName,ScheduleName,Nruns))
df <- data.frame( RM = rmvals, Cmax = cmax)
df.summary <- df %>% group_by(RM) %>% summarize(ymin = mean(cmax) - sd(cmax), ymax = mean(cmax) + sd(cmax),ymean = mean(cmax))
df.summary$PointLabel <- abbreviate(ScheduleName)
return( df.summary )
}
# build data frame:
BuildPlot <- function(cScheduleNames,InstanceName,Nruns)
{
##
dflist <- lapply(cScheduleNames,FUN = BuildDfFor, InstanceName = InstanceName, Nruns = Nruns)
dfplotinfo <- rbind.fill(dflist)
return (dfplotinfo)
}
MakePlot <- function(string.RM, string.QM)
{
RMsym <- sym(string.RM)
QMsym <- sym(string.QM)
library(ggplot2)
#library(tidyverse)
myDF.plot <- myDF %>%
group_by(Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QMsd = sd(!!QMsym),QM=mean(!!QMsym))
# names(myDF.plot)[3] <- string.RM
#  names(myDF.plot)[4] <- paste(string.QM,"sd",sep="")
#  names(myDF.plot)[5] <- string.QM
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.StartTimeType,shape=Schedule.StartTimeType))
p <- p + geom_point()
p <- p + geom_errorbar(aes(ymin=QM-QMsd,ymax=QM+QMsd))
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(string.QM)
p <- p + theme(legend.position = "top")
fileName <- paste("C:\\Users\\3496724\\Source\\Repos\\SimulationTools\\Results\\RMs\\",string.RM,"_vs_",string.QM,".pdf",sep="")
ggsave(filename = fileName,plot = p)
print(p)
}
Plot.SchedStart.vs.RealisedStart <- function()
{
}
MakeAllPlots <- function()
{
RMs <- c("FS","BFS","UFS","wFS")
QMs <- c("Cmax","LinearStartDelay","Start.Punctuality","Finish.Punctuality")
for(Rm in RMs)
{
for(Qm in QMs)
{
MakePlot(Rm,Qm)
}
}
}
#
#
######## ACTUAL WORK ##########################################
#
#
#plot.df <- BuildPlot(SCHEDNAMES,INSTANCE,NRUNS)
#errorBarWidth <- max(plot.df$RM) / (4 * length(unique(plot.df$RM)))
#p <- ggplot(plot.df, aes(x = RM, y = ymean, label= PointLabel)) + geom_point(size = 2) + geom_errorbar(aes(ymin = ymin, ymax = ymax, width = errorBarWidth))+geom_text(aes(label=PointLabel),hjust=0, vjust=0)
#p + labs(x = paste(c("Schedule ",abbreviate(GetRMName())," score"),collapse=''), y = GetQMName())
########### plot from one big data file ############
myDF <- read.csv2("C:/Users/3496724/Source/Repos/SimulationTools/Results/RMs/allresults.txt")
MakeAllPlots()
############################
#For debugging
myDF.plot <- myDF %>%
group_by(Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(SS1=mean(ScheduledStartTime1),Delay=mean(RealisedStartTime1-ScheduledStartTime1))
PlotSchedStartvsDelay <- function(string.Instance,string.AssignType)
{
myDF <- read.csv2("C:/Users/3496724/Source/Repos/SimulationTools/Results/RMs/allresults.txt")
myDF <- subset(myDF,grepl(string.Instance,Instance.Name))
myDF <- subset(myDF,grepl(string.AssignType,Schedule.AssignType))
melted.myDF <- melt(myDF,id=names(myDF)[1:12])
my.melted.DF.plot <- melted.myDF %>%
group_by(Instance.Name,Schedule.AssignType,Schedule.StartTimeType,variable) %>%
summarize(mval = mean(value),sdval = sd(value))
melted2.df.plot <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))
xval <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))$mval
yval <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$mval - xval
yvalsd <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$sdval
df.plot <- data.frame(melted2.df.plot,yval,yvalsd)
p <- ggplot(df.plot,aes(x=mval,y=yval,group=interaction(Schedule.AssignType,Instance.Name),colour=Schedule.AssignType,shape=Instance.Name))
p + geom_point()
}
starttimes <- subset(my.melted.DF.plot,grepl("Scheduled",variable,fixed = TRUE))$mval
cbind(my.melted.DF.plot,starttimes)
ggplot(myDF.plot,aes(x=SS1,y=Delay,colour = Schedule.AssignType,shape=Schedule.AssignType)) + geom_point()
#p <- ggplot(myDF.plot,aes(x=FS,y=Cmax,colour=Schedule.StartTimeType,shape=Schedule.StartTimeType))
#p <- p + geom_point()
#p <- p + geom_errorbar(aes(ymin=Cmax-Cmaxsd,ymax=Cmax+Cmaxsd))
#p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,2000))
#p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,500))
#p
#MakeAllPlots()
########### plot from one big data file ############
myDF <- read.csv2("C:/Users/3496724/Source/Repos/SimulationTools/Results/RMs/allresults.txt")
names(myDF)
MakePlot <- function(string.RM, string.QM)
{
RMsym <- sym(string.RM)
QMsym <- sym(string.QM)
library(ggplot2)
#library(tidyverse)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QMsd = sd(!!QMsym),QM=mean(!!QMsym))
# names(myDF.plot)[3] <- string.RM
#  names(myDF.plot)[4] <- paste(string.QM,"sd",sep="")
#  names(myDF.plot)[5] <- string.QM
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.StartTimeType,shape=Schedule.StartTimeType))
p <- p + geom_point()
p <- p + geom_errorbar(aes(ymin=QM-QMsd,ymax=QM+QMsd))
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(string.QM)
p <- p + theme(legend.position = "top")
fileName <- paste("C:\\Users\\3496724\\Source\\Repos\\SimulationTools\\Results\\RMs\\",string.RM,"_vs_",string.QM,".pdf",sep="")
ggsave(filename = fileName,plot = p)
print(p)
}
MakeAllPlots <- function()
{
RMs <- c("FS","BFS","UFS","wFS")
QMs <- c("Cmax","LinearStartDelay","Start.Punctuality","Finish.Punctuality")
for(Rm in RMs)
{
for(Qm in QMs)
{
MakePlot(Rm,Qm)
}
}
}
MakePlot("FS","Cmax")
#RMsym <- sym(string.RM)
#QMsym <- sym(string.QM)
RMsym <- sym("FS")
QMsym <- sym("Cmax")
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QMsd = sd(!!QMsym),QM=mean(!!QMsym))
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.StartTimeType,shape=Schedule.StartTimeType))
p <- p + geom_point()
p <- p + geom_errorbar(aes(ymin=QM-QMsd,ymax=QM+QMsd))
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(string.QM)
p <- p + theme(legend.position = "top")
print(p)
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.StartTimeType,shape=Schedule.StartTimeType))
print(p)
myDF.plot
#RMsym <- sym(string.RM)
#QMsym <- sym(string.QM)
RMsym <- sym("FS")
QMsym <- sym("Cmax")
library(ggplot2)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QMsd = sd(!!QMsym),QM=mean(!!QMsym))
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.StartTimeType,shape=Schedule.StartTimeType))
p <- p + geom_point()
p <- p + geom_errorbar(aes(ymin=QM-QMsd,ymax=QM+QMsd))
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(string.QM)
p <- p + theme(legend.position = "top")
fileName <- paste("C:\\Users\\3496724\\Source\\Repos\\SimulationTools\\Results\\RMs\\",string.RM,"_vs_",string.QM,".pdf",sep="")
ggsave(filename = fileName,plot = p)
print(p)
myDF.plot
########### plot from one big data file ############
myDF <- read.csv2("C:/Users/3496724/Source/Repos/SimulationTools/Results/RMs/allresults.txt")
MakePlot("FS","Cmax")
MakePlot <- function(string.RM, string.QM)
{
RMsym <- sym(string.RM)
QMsym <- sym(string.QM)
#RMsym <- sym("FS")
#QMsym <- sym("Cmax")
library(ggplot2)
#library(tidyverse)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QMsd = sd(!!QMsym),QM=mean(!!QMsym))
# names(myDF.plot)[3] <- string.RM
#  names(myDF.plot)[4] <- paste(string.QM,"sd",sep="")
#  names(myDF.plot)[5] <- string.QM
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Distribution.Type,shape=Distribution.Type))
p <- p + geom_point()
p <- p + geom_errorbar(aes(ymin=QM-QMsd,ymax=QM+QMsd))
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(string.QM)
p <- p + theme(legend.position = "top")
fileName <- paste("C:\\Users\\3496724\\Source\\Repos\\SimulationTools\\Results\\RMs\\",string.RM,"_vs_",string.QM,".pdf",sep="")
ggsave(filename = fileName,plot = p)
print(p)
}
MakePlot("FS","Cmax")
########### plot from one big data file ############
myDF <- read.csv2("C:/Users/3496724/Source/Repos/SimulationTools/Results/RMs/allresults.txt")
MakePlot("FS","Cmax")
MakePlot
MakePlot <- function(string.RM, string.QM,xRange,yRange)
{
RMsym <- sym(string.RM)
QMsym <- sym(string.QM)
#RMsym <- sym("FS")
#QMsym <- sym("Cmax")
library(ggplot2)
#library(tidyverse)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QMsd = sd(!!QMsym),QM=mean(!!QMsym))
# names(myDF.plot)[3] <- string.RM
#  names(myDF.plot)[4] <- paste(string.QM,"sd",sep="")
#  names(myDF.plot)[5] <- string.QM
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Distribution.Type,shape=Distribution.Type))
p <- p + geom_point()
p <- p + geom_errorbar(aes(ymin=QM-QMsd,ymax=QM+QMsd))
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,xRange))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,yRange))
p <- p + xlab(string.RM) + ylab(string.QM)
p <- p + theme(legend.position = "top")
fileName <- paste("C:\\Users\\3496724\\Source\\Repos\\SimulationTools\\Results\\RMs\\",string.RM,"_vs_",string.QM,".pdf",sep="")
ggsave(filename = fileName,plot = p)
print(p)
}
MakePlot("FS","Cmax",1000,1000)
MakePlot("FS","Cmax",5000,5000)
MakePlot("FS","Cmax")
########### plot from one big data file ############
myDF <- read.csv2("C:/Users/3496724/Source/Repos/SimulationTools/Results/RMs/allresults.txt")
MakePlot.WithRange <- function(string.RM, string.QM,xRange,yRange)
{
RMsym <- sym(string.RM)
QMsym <- sym(string.QM)
#RMsym <- sym("FS")
#QMsym <- sym("Cmax")
library(ggplot2)
#library(tidyverse)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QMsd = sd(!!QMsym),QM=mean(!!QMsym))
# names(myDF.plot)[3] <- string.RM
#  names(myDF.plot)[4] <- paste(string.QM,"sd",sep="")
#  names(myDF.plot)[5] <- string.QM
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Distribution.Type,shape=Distribution.Type))
p <- p + geom_point()
p <- p + geom_errorbar(aes(ymin=QM-QMsd,ymax=QM+QMsd))
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,xRange))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,yRange))
p <- p + xlab(string.RM) + ylab(string.QM)
p <- p + theme(legend.position = "top")
fileName <- paste("C:\\Users\\3496724\\Source\\Repos\\SimulationTools\\Results\\RMs\\",string.RM,"_vs_",string.QM,".pdf",sep="")
ggsave(filename = fileName,plot = p)
print(p)
}
MakePlot <- function(string.RM, string.QM)
{
RMsym <- sym(string.RM)
QMsym <- sym(string.QM)
#RMsym <- sym("FS")
#QMsym <- sym("Cmax")
library(ggplot2)
#library(tidyverse)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QMsd = sd(!!QMsym),QM=mean(!!QMsym))
# names(myDF.plot)[3] <- string.RM
#  names(myDF.plot)[4] <- paste(string.QM,"sd",sep="")
#  names(myDF.plot)[5] <- string.QM
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Distribution.Type,shape=Distribution.Type))
p <- p + geom_point()
p <- p + geom_errorbar(aes(ymin=QM-QMsd,ymax=QM+QMsd))
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(string.QM)
p <- p + theme(legend.position = "top")
fileName <- paste("C:\\Users\\3496724\\Source\\Repos\\SimulationTools\\Results\\RMs\\",string.RM,"_vs_",string.QM,".pdf",sep="")
ggsave(filename = fileName,plot = p)
print(p)
}
########### plot from one big data file ############
myDF <- read.csv2("C:/Users/3496724/Source/Repos/SimulationTools/Results/RMs/allresults.txt")
MakePlot("FS","Cmax")
MakePlot.WithRange("FS","Cmax",1000,1000000)
?rnorm
Zs <- rnorm(1000)
mean <- 5
sd <- 1.5
Xs <- exp(mean + sd*Zs)
plot(Xs)
histogram(Xs)
hist(Xs)
Zs <- rnorm(10)
mean <- 5
sd <- 1.5
Xs <- exp(mean + sd*Zs)
hist(Xs)
#MakeAllPlots()
Zs
Zs <- rnorm(1000)
mean <- 5
sd <- 1.5
Xs <- exp(mean + sd*Zs)
hist(Xs)
Zs <- rnorm(1000)
mean <- 5
sd <- 0.5
Xs <- exp(mean + sd*Zs)
hist(Xs)
Zs <- rnorm(10000)
mean <- 5
sd <- 0.05
Xs <- exp(mean + sd*Zs)
hist(Xs)
Zs <- rnorm(10000)
mean <- 5
sd <- 0.25*mean
Xs <- exp(mean + sd*Zs)
hist(Xs)
Zs <- rnorm(10000)
mean <- 5
sd <- 0.25*mean
Xs <- exp(mean + sd*Zs)
hist(Xs)
mean(Xs)
Zs <- rnorm(10000)
mean <- log(5)
sd <- 0.25*mean
Xs <- exp(mean + sd*Zs)
hist(Xs)
mean(Xs)
Zs <- rnorm(10000)
mean <- log(5)
sd <- 0.25*mean
Xs <- exp(mean + sd*Zs)
hist(Xs)
mean(Xs)
Zs <- rnorm(10000)
mean <- log(5)
sd <- 0.25*mean
Xs <- exp(mean + sd*Zs)
hist(Xs)
mean(Xs)
mean(Zs)
mean(Zs)
mean(Zs)
Zs <- rnorm(10000)
Zs <- rnorm(10000)
mean(Zs)
Zs <- rnorm(10000)
mean(Zs)
Zs <- rnorm(10000)
mean(Zs)
Zs <- rnorm(10000)
mean(Zs)
mean <- 5
sd <- 0.25*mean
Xs <- exp(mean + sd*Zs)
hist(Xs)
mean(Xs)
?log
mean <- log(5)
mean
sd <- 0
Xs <- exp(mean + sd*Zs)
mean(Xs)
mean <- log(5)
sd <- 10
Xs <- exp(mean + sd*Zs)
mean(Xs)
mean <- log(5)
sd <- 10
Xs <- exp(mean + sd*Zs)
mean(Xs)
Zs <- rnorm(10000)
mean(Zs)
LNmean <- 5
LNvar <- 1
mu <- log(LNmean^2 / sqrt(LNvar + LNmean^2))
sigma <- sqrt(log(1+LNvar/LNmean^2))
Xs <- exp(mu + sigma*Zs)
mean(Xs)
sd(Xs)#MakeAllPlots()
Zs <- rnorm(10000)
mean(Zs)
LNmean <- 5
LNvar <- 10
mu <- log(LNmean^2 / sqrt(LNvar + LNmean^2))
sigma <- sqrt(log(1+LNvar/LNmean^2))
Xs <- exp(mu + sigma*Zs)
mean(Xs)
sd(Xs)#MakeAllPlots()
Zs <- rnorm(10000)
mean(Zs)
LNmean <- 5
LNvar <- 10
mu <- log(LNmean^2 / sqrt(LNvar + LNmean^2))
sigma <- sqrt(log(1+LNvar/LNmean^2))
Xs <- exp(mu + sigma*Zs)
mean(Xs)
sd(Xs)
Zs <- rnorm(10000)
mean(Zs)
LNmean <- 5
LNvar <- 10
mu <- log(LNmean^2 / sqrt(LNvar + LNmean^2))
sigma <- sqrt(log(1+LNvar/LNmean^2))
Xs <- exp(mu + sigma*Zs)
mean(Xs)
sd(Xs)^2
Zs <- rnorm(10000)
mean(Zs)
LNmean <- 5
LNvar <- 10
mu <- log(LNmean^2 / sqrt(LNvar + LNmean^2))
sigma <- log(1+LNvar/LNmean^2)
Xs <- exp(mu + sigma*Zs)
mean(Xs)
sd(Xs)^2
Zs <- rnorm(10000)
mean(Zs)
LNmean <- 5
LNvar <- 10
mu <- log(LNmean^2 / sqrt(LNvar + LNmean^2))
sigma <- log(1+LNvar/LNmean^2)
Xs <- exp(mu + sigma*Zs)
mean(Xs)
sd(Xs)
Zs <- rnorm(10000)
mean(Zs)
LNmean <- 5
LNvar <- 10
mu <- log(LNmean^2 / sqrt(LNvar + LNmean^2))
sigma <- sqrt(log(1+LNvar/LNmean^2))
Xs <- exp(mu + sigma*Zs)
mean(Xs)
sd(Xs)
sd(Xs)^2
Zs <- rnorm(10000)
mean(Zs)
LNmean <- 5
LNvar <- 10^2
mu <- log(LNmean^2 / sqrt(LNvar + LNmean^2))
sigma <- sqrt(log(1+LNvar/LNmean^2))
Xs <- exp(mu + sigma*Zs)
mean(Xs)
sd(Xs)
Zs <- rnorm(10000)
mean(Zs)
LNmean <- 5
LNvar <- 10^2
mu <- log(LNmean^2 / sqrt(LNvar + LNmean^2))
sigma <- sqrt(log(1+LNvar/LNmean^2))
Xs <- exp(mu + sigma*Zs)
mean(Xs)
sd(Xs)
########### plot from one big data file ############
myDF <- read.csv2("C:/Users/3496724/Source/Repos/SimulationTools/Results/RMs/allresults.txt")
MakePlot.WithRange("FS","Cmax",1000,1000)
MakePlot.WithRange("FS","Cmax",1000,1000)
MakeAllPlots()
warnings()
PlotSchedStartvsDelay <- function(string.Instance,string.AssignType)
{
myDF <- read.csv2("C:/Users/3496724/Source/Repos/SimulationTools/Results/RMs/allresults.txt")
myDF <- subset(myDF,grepl(string.Instance,Instance.Name))
myDF <- subset(myDF,grepl(string.AssignType,Schedule.AssignType))
melted.myDF <- melt(myDF,id=names(myDF)[1:12])
my.melted.DF.plot <- melted.myDF %>%
group_by(Instance.Name,Schedule.AssignType,Schedule.StartTimeType,variable) %>%
summarize(mval = mean(value),sdval = sd(value))
melted2.df.plot <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))
xval <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))$mval
yval <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$mval - xval
yvalsd <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$sdval
df.plot <- data.frame(melted2.df.plot,yval,yvalsd)
p <- ggplot(df.plot,aes(x=mval,y=yval,group=interaction(Schedule.AssignType,Instance.Name),colour=Schedule.AssignType,shape=Instance.Name))
p + geom_point()
}
PlotSchedStartvsDelay("30j-15r-4m.ms","Greedy")
PlotSchedStartvsDelay <- function(string.Instance,string.AssignType)
{
library(reshape)
myDF <- read.csv2("C:/Users/3496724/Source/Repos/SimulationTools/Results/RMs/allresults.txt")
myDF <- subset(myDF,grepl(string.Instance,Instance.Name))
myDF <- subset(myDF,grepl(string.AssignType,Schedule.AssignType))
melted.myDF <- melt(myDF,id=names(myDF)[1:12])
my.melted.DF.plot <- melted.myDF %>%
group_by(Instance.Name,Schedule.AssignType,Schedule.StartTimeType,variable) %>%
summarize(mval = mean(value),sdval = sd(value))
melted2.df.plot <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))
xval <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))$mval
yval <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$mval - xval
yvalsd <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$sdval
df.plot <- data.frame(melted2.df.plot,yval,yvalsd)
p <- ggplot(df.plot,aes(x=mval,y=yval,group=interaction(Schedule.AssignType,Instance.Name),colour=Schedule.AssignType,shape=Instance.Name))
p + geom_point()
}
PlotSchedStartvsDelay("30j-15r-4m.ms","Greedy")
