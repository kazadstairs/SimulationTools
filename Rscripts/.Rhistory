PlotSchedStartvsDelay("30j-30r-4m","Random")
PlotSchedStartvsDelay <- function(string.Instance,string.AssignType)
{
library(reshape)
myDF <- read.csv2(PATH)
myDF <- subset(myDF,grepl(string.Instance,Instance.Name))
myDF <- subset(myDF,grepl(string.AssignType,Schedule.AssignType))
melted.myDF <- melt(myDF,id=names(myDF)[1:12])
my.melted.DF.plot <- melted.myDF %>%
group_by(Instance.Name,Schedule.AssignType,Schedule.StartTimeType,variable) %>%
summarize(mval = mean(value),sdval = sd(value))
view(my.melted.DF.plot[1:50,])
melted2.df.plot <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))
xval <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))$mval
yval <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$mval - xval
yvalsd <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$sdval
df.plot <- data.frame(melted2.df.plot,yval,yvalsd)
p <- ggplot(df.plot,aes(x=mval,y=yval,group=interaction(Schedule.AssignType,Instance.Name),colour=Schedule.AssignType,shape=Instance.Name))
p + geom_point()
p <- p + geom_errorbar(aes(ymin=yval-yvalsd,ymax=yval+yvalsd))
p <- p + xlab(paste("Jobstarttime")) + ylab("Delay")
p <- p + theme(legend.position = "top")
show(p)
}
PlotSchedStartvsDelay("30j-30r-4m","Random")
PlotSchedStartvsDelay <- function(string.Instance,string.AssignType)
{
library(reshape)
myDF <- read.csv2(PATH)
myDF <- subset(myDF,grepl(string.Instance,Instance.Name))
myDF <- subset(myDF,grepl(string.AssignType,Schedule.AssignType))
melted.myDF <- melt(myDF,id=names(myDF)[1:12])
my.melted.DF.plot <- melted.myDF %>%
group_by(Instance.Name,Schedule.AssignType,Schedule.StartTimeType,variable) %>%
summarize(mval = mean(value),sdval = sd(value))
View(my.melted.DF.plot[1:50,])
melted2.df.plot <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))
xval <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))$mval
yval <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$mval - xval
yvalsd <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$sdval
df.plot <- data.frame(melted2.df.plot,yval,yvalsd)
p <- ggplot(df.plot,aes(x=mval,y=yval,group=interaction(Schedule.AssignType,Instance.Name),colour=Schedule.AssignType,shape=Instance.Name))
p + geom_point()
p <- p + geom_errorbar(aes(ymin=yval-yvalsd,ymax=yval+yvalsd))
p <- p + xlab(paste("Jobstarttime")) + ylab("Delay")
p <- p + theme(legend.position = "top")
show(p)
}
PlotSchedStartvsDelay("30j-30r-4m","Random")
PlotSchedStartvsDelay <- function(string.Instance,string.AssignType)
{
library(reshape)
myDF <- read.csv2(PATH)
myDF <- subset(myDF,grepl(string.Instance,Instance.Name))
myDF <- subset(myDF,grepl(string.AssignType,Schedule.AssignType))
melted.myDF <- melt(myDF,id=names(myDF)[1:12])
my.melted.DF.plot <- melted.myDF %>%
group_by(Instance.Name,Schedule.AssignType,Schedule.StartTimeType,variable) %>%
summarize(mval = mean(value),sdval = sd(value))
View(my.melted.DF.plot)
melted2.df.plot <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))
xval <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))$mval
yval <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$mval - xval
yvalsd <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$sdval
df.plot <- data.frame(melted2.df.plot,yval,yvalsd)
p <- ggplot(df.plot,aes(x=mval,y=yval,group=interaction(Schedule.AssignType,Instance.Name),colour=Schedule.AssignType,shape=Instance.Name))
p + geom_point()
p <- p + geom_errorbar(aes(ymin=yval-yvalsd,ymax=yval+yvalsd))
p <- p + xlab(paste("Jobstarttime")) + ylab("Delay")
p <- p + theme(legend.position = "top")
show(p)
}
PlotSchedStartvsDelay("30j-30r-4m","Random")
PlotSchedStartvsDelay <- function(string.Instance,string.AssignType)
{
library(reshape)
myDF <- read.csv2(PATH)
myDF <- subset(myDF,grepl(string.Instance,Instance.Name))
myDF <- subset(myDF,grepl(string.AssignType,Schedule.AssignType))
melted.myDF <- melt(myDF,id=names(myDF)[1:12])
my.melted.DF.plot <- melted.myDF %>%
group_by(Instance.Name,Schedule.AssignType,Schedule.StartTimeType,variable) %>%
summarize(mval = mean(value),sdval = sd(value))
View(my.melted.DF.plot)
melted2.df.plot <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))
xval <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))$mval
yval <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$mval - xval
yvalsd <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$sdval
df.plot <- data.frame(melted2.df.plot,yval,yvalsd)
p <- ggplot(df.plot,aes(x=mval,y=yval,group=interaction(Schedule.AssignType,Instance.Name),colour=Schedule.AssignType,shape=Instance.Name))
p + geom_point(size=3)
p <- p + geom_errorbar(aes(ymin=yval-yvalsd,ymax=yval+yvalsd))
p <- p + xlab(paste("Jobstarttime")) + ylab("Delay")
p <- p + theme(legend.position = "top")
show(p)
}
PlotSchedStartvsDelay("30j-30r-4m","Random")
PlotSchedStartvsDelay <- function(string.Instance,string.AssignType)
{
library(reshape)
myDF <- read.csv2(PATH)
myDF <- subset(myDF,grepl(string.Instance,Instance.Name))
myDF <- subset(myDF,grepl(string.AssignType,Schedule.AssignType))
melted.myDF <- melt(myDF,id=names(myDF)[1:12])
my.melted.DF.plot <- melted.myDF %>%
group_by(Instance.Name,Schedule.AssignType,Schedule.StartTimeType,variable) %>%
summarize(mval = mean(value),sdval = sd(value))
View(my.melted.DF.plot)
melted2.df.plot <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))
xval <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))$mval
yval <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$mval - xval
yvalsd <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$sdval
df.plot <- data.frame(melted2.df.plot,yval,yvalsd)
p <- ggplot(df.plot,aes(x=mval,y=yval,group=interaction(Schedule.AssignType,Instance.Name),colour=Schedule.AssignType,shape=Instance.Name))
p + geom_point(size=3,aes(x=mval,y=yval))
p <- p + geom_errorbar(aes(ymin=yval-yvalsd,ymax=yval+yvalsd))
p <- p + xlab(paste("Jobstarttime")) + ylab("Delay")
p <- p + theme(legend.position = "top")
show(p)
}
PlotSchedStartvsDelay("30j-30r-4m","Random")
PlotSchedStartvsDelay <- function(string.Instance,string.AssignType)
{
library(reshape)
myDF <- read.csv2(PATH)
myDF <- subset(myDF,grepl(string.Instance,Instance.Name))
myDF <- subset(myDF,grepl(string.AssignType,Schedule.AssignType))
melted.myDF <- melt(myDF,id=names(myDF)[1:12])
my.melted.DF.plot <- melted.myDF %>%
group_by(Instance.Name,Schedule.AssignType,Schedule.StartTimeType,variable) %>%
summarize(mval = mean(value),sdval = sd(value))
View(my.melted.DF.plot)
melted2.df.plot <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))
xval <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))$mval
yval <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$mval - xval
yvalsd <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$sdval
df.plot <- data.frame(melted2.df.plot,yval,yvalsd)
p <- ggplot(df.plot,aes(x=mval,y=yval,group=interaction(Schedule.AssignType,Instance.Name),colour=Schedule.AssignType,shape=Instance.Name))
p + geom_point()
p <- p + geom_errorbar(aes(ymin=yval-yvalsd,ymax=yval+yvalsd))
p <- p + xlab(paste("Jobstarttime")) + ylab("Delay")
p <- p + theme(legend.position = "top")
show(p)
}
PlotSchedStartvsDelay <- function(string.Instance,string.AssignType)
{
library(reshape)
myDF <- read.csv2(PATH)
myDF <- subset(myDF,grepl(string.Instance,Instance.Name))
myDF <- subset(myDF,grepl(string.AssignType,Schedule.AssignType))
melted.myDF <- melt(myDF,id=names(myDF)[1:12])
my.melted.DF.plot <- melted.myDF %>%
group_by(Instance.Name,Schedule.AssignType,Schedule.StartTimeType,variable) %>%
summarize(mval = mean(value),sdval = sd(value))
View(my.melted.DF.plot)
melted2.df.plot <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))
xval <- subset(my.melted.DF.plot,grepl("Scheduled", variable, fixed=TRUE))$mval
yval <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$mval - xval
yvalsd <- subset(my.melted.DF.plot,grepl("RealisedStartTime", variable, fixed=TRUE))$sdval
df.plot <- data.frame(melted2.df.plot,yval,yvalsd)
p <- ggplot(df.plot,aes(x=mval,y=yval,group=interaction(Schedule.AssignType,Instance.Name),colour=Schedule.AssignType,shape=Instance.Name))
p + geom_point()
p <- p + geom_errorbar(aes(ymin=yval-yvalsd,ymax=yval+yvalsd))
p <- p + xlab(paste("Jobstarttime")) + ylab("Delay")
p <- p + theme(legend.position = "top")
show(p)
}
PlotSchedStartvsDelay("30j-30r-4m","Random")
MakeRelativeQuantileDifPlot <- function(string.RM,double.upperQ)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (quantile((!!QMsym),double.upperQ)/mean(!!QMsym))-1)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Problem.Instance))
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(paste(100*double.upperQ,"% quantile Cmax / mean(Cmax) - 1"))
p <- p + theme(legend.position = "top") + ggtitle(paste(100*double.upperQ,"% quantile / 50% quantile. Spearman = ",Srho$estimate))
show(p)
}
MakeQuantilePlot("FS",0.95,"relative")
MakeRelativeQuantileDifPlot <- function(string.RM,double.upperQ)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (quantile((!!QMsym),double.upperQ)/mean(!!QMsym))-1)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(paste(100*double.upperQ,"% quantile Cmax / mean(Cmax) - 1"))
p <- p + theme(legend.position = "top") + ggtitle(paste(100*double.upperQ,"% quantile / 50% quantile. Spearman = ",Srho$estimate))
show(p)
}
MakeQuantilePlot("FS",0.95,"relative")
MakeRelativeQuantileDifPlot <- function(string.RM,double.upperQ)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (quantile((!!QMsym),double.upperQ)/mean(!!QMsym))-1)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
p <- p + geom_text(aes(label=Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(paste(100*double.upperQ,"% quantile Cmax / mean(Cmax) - 1"))
p <- p + theme(legend.position = "top") + ggtitle(paste(100*double.upperQ,"% quantile / 50% quantile. Spearman = ",Srho$estimate))
show(p)
}
MakeQuantilePlot("FS",0.95,"relative")
MakeRelativeQuantileDifPlot <- function(string.RM,double.upperQ)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (quantile((!!QMsym),double.upperQ)/mean(!!QMsym))-1)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
p <- p + geom_text(aes(label=Instance.Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(paste(100*double.upperQ,"% quantile Cmax / mean(Cmax) - 1"))
p <- p + theme(legend.position = "top") + ggtitle(paste(100*double.upperQ,"% quantile / 50% quantile. Spearman = ",Srho$estimate))
show(p)
}
MakeQuantilePlot("FS",0.95,"relative")
MakeRelativeQuantileDifPlot <- function(string.RM,double.upperQ)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (quantile((!!QMsym),double.upperQ)/mean(!!QMsym))-1)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
#p <- p + geom_text(aes(label=Instance.Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(paste(100*double.upperQ,"% quantile Cmax / mean(Cmax) - 1"))
p <- p + theme(legend.position = "top") + ggtitle(paste(100*double.upperQ,"% quantile / 50% quantile. Spearman = ",Srho$estimate))
show(p)
}
MakeQuantilePlot("FS",0.66,"relative")
MakeQuantilePlot("TS",0.66,"relative")
MakeQuantilePlot("wTS",0.66,"relative")
MakeQuantilePlot("BTS",0.66,"relative")
MakeRelativeSDPlot <- function(string.RM)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = sd(!!QMsym)/mean(!!QMsym) - 1)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
#p <- p + geom_text(aes(label=Instance.Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(paste("sd(Cmax)"/"Cmax"-1))
p <- p + theme(legend.position = "top") + ggtitle(paste(100*double.upperQ,"% quantile / 50% quantile. Spearman = ",Srho$estimate))
show(p)
}
MakeRelativeSDPlot("FS")
MakeRelativeSDPlot <- function(string.RM)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (sd(!!QMsym)/mean(!!QMsym)) - 1)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
#p <- p + geom_text(aes(label=Instance.Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(paste("sd(Cmax)"/"Cmax"-1))
p <- p + theme(legend.position = "top") + ggtitle(paste(100*double.upperQ,"% quantile / 50% quantile. Spearman = ",Srho$estimate))
show(p)
}
MakeRelativeSDPlot("FS")
MakeRelativeSDPlot <- function(string.RM)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (sd(!!QMsym)/mean(!!QMsym)) - 1)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
#p <- p + geom_text(aes(label=Instance.Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab(paste("sd(Cmax)"/"Cmax - 1"))
p <- p + theme(legend.position = "top") + ggtitle(paste(100*double.upperQ,"% quantile / 50% quantile. Spearman = ",Srho$estimate))
show(p)
}
MakeRelativeSDPlot("FS")
MakeRelativeSDPlot <- function(string.RM)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (sd(!!QMsym)/mean(!!QMsym)) - 1)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
#p <- p + geom_text(aes(label=Instance.Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab("sd(Cmax)"/"Cmax - 1")
p <- p + theme(legend.position = "top") + ggtitle(paste(100*double.upperQ,"% quantile / 50% quantile. Spearman = ",Srho$estimate))
show(p)
}
MakeRelativeSDPlot("FS")
MakeRelativeSDPlot <- function(string.RM)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (sd(!!QMsym)/mean(!!QMsym)) - 1)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
#p <- p + geom_text(aes(label=Instance.Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab("sd(Cmax)/Cmax - 1")
p <- p + theme(legend.position = "top") + ggtitle(paste(100*double.upperQ,"% quantile / 50% quantile. Spearman = ",Srho$estimate))
show(p)
}
MakeRelativeSDPlot("FS")
MakeRelativeSDPlot <- function(string.RM)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (sd(!!QMsym)/mean(!!QMsym)) - 1)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
#p <- p + geom_text(aes(label=Instance.Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab("sd(Cmax)/Cmax - 1")
p <- p + theme(legend.position = "top") + ggtitle(paste("sd(Cmax)/Cmax - 1. Spearman = ",Srho$estimate))
show(p)
}
MakeRelativeSDPlot("FS")
MakeRelativeSDPlot("TS")
myDF[1:3,1:20]
MakeRelativeSDPlot <- function(string.RM)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (sd(!!QMsym)/mean(!!QMsym)) - 1)
view(myDF.plot)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
#p <- p + geom_text(aes(label=Instance.Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab("sd(Cmax)/Cmax - 1")
p <- p + theme(legend.position = "top") + ggtitle(paste("sd(Cmax)/Cmax - 1. Spearman = ",Srho$estimate))
show(p)
}
MakeRelativeSDPlot("TS")
MakeRelativeSDPlot <- function(string.RM)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (sd(!!QMsym)/mean(!!QMsym)) - 1)
View(myDF.plot)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
#p <- p + geom_text(aes(label=Instance.Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab("sd(Cmax)/Cmax - 1")
p <- p + theme(legend.position = "top") + ggtitle(paste("sd(Cmax)/Cmax - 1. Spearman = ",Srho$estimate))
show(p)
}
MakeRelativeSDPlot("TS")
MakeRelativeSDPlot <- function(string.RM)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (sd(!!QMsym)/mean(!!QMsym)))
View(myDF.plot)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
#p <- p + geom_text(aes(label=Instance.Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab("sd(Cmax)/Cmax - 1")
p <- p + theme(legend.position = "top") + ggtitle(paste("sd(Cmax)/Cmax. Spearman = ",Srho$estimate))
show(p)
}
MakeRelativeSDPlot("TS")
MakeRelativeSDPlot("BTS")
MakeRelativeSDPlot("wTS")
MakeRelativeSDPlot <- function(string.RM)
{
library(dplyr)
RMsym <- rlang::sym(string.RM)
string.QM <- "Cmax"
QMsym <- rlang::sym(string.QM)
myDF.plot <- myDF %>%
group_by(Distribution.Type,Instance.Name,Schedule.AssignType,Schedule.StartTimeType) %>%
summarize(RM = mean(!!RMsym),QM = (sd(!!QMsym)/mean(!!QMsym)))
View(myDF.plot)
Xvals <- myDF.plot[,"RM"][[1]]
Yvals <- myDF.plot[,"QM"][[1]] #[,""] gets the single tibble column. THen [[1]] gets the first element: The vector
Srho <- cor.test(x=Xvals,y=Yvals,method = "spearman")
p <- ggplot(myDF.plot,aes(x=RM,y=QM,colour=Schedule.AssignType,shape=Schedule.StartTimeType,label=Instance.Name))
#p <- p + geom_text(aes(label=Instance.Name),hjust=0, vjust=0)
p <- p + geom_point()
p <- p + scale_x_continuous(expand = c(0, 0),limits = c(0,1.1*max(myDF.plot$RM)))
p <- p + scale_y_continuous(expand = c(0, 0),limits= c(0,1.1*max(myDF.plot$QM)))
p <- p + xlab(string.RM) + ylab("sd(Cmax)/Cmax")
p <- p + theme(legend.position = "top") + ggtitle(paste("sd(Cmax)/Cmax. Spearman = ",Srho$estimate))
show(p)
}
MakeRelativeSDPlot("wTS")
MakeRelativeSDPlot("BTS")
MakeRelativeSDPlot("TS")
MakeRelativeSDPlot("UFS")
MakeRelativeSDPlot("FS")
MakeRelativeSDPlot("wFS")
